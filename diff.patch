diff -Nur linux-3.13/arch/x86/include/asm/syscalls.h linux-3.13new/arch/x86/include/asm/syscalls.h
--- linux-3.13/arch/x86/include/asm/syscalls.h	2014-01-20 08:10:07.000000000 +0530
+++ linux-3.13new/arch/x86/include/asm/syscalls.h	2018-02-09 15:03:02.570311691 +0530
@@ -49,6 +49,5 @@
 /* kernel/sys_x86_64.c */
 asmlinkage long sys_mmap(unsigned long, unsigned long, unsigned long,
 			 unsigned long, unsigned long, unsigned long);
-
 #endif /* CONFIG_X86_32 */
 #endif /* _ASM_X86_SYSCALLS_H */
diff -Nur linux-3.13/arch/x86/syscalls/syscall_64.tbl linux-3.13new/arch/x86/syscalls/syscall_64.tbl
--- linux-3.13/arch/x86/syscalls/syscall_64.tbl	2014-01-20 08:10:07.000000000 +0530
+++ linux-3.13new/arch/x86/syscalls/syscall_64.tbl	2018-02-09 14:44:12.822311691 +0530
@@ -320,7 +320,7 @@
 311	64	process_vm_writev	sys_process_vm_writev
 312	common	kcmp			sys_kcmp
 313	common	finit_module		sys_finit_module
-
+314	common	sh_task_info		sys_sh_task_info
 #
 # x32-specific system call numbers start at 512 to avoid cache impact
 # for native 64-bit operation.
diff -Nur linux-3.13/include/linux/syscalls.h linux-3.13new/include/linux/syscalls.h
--- linux-3.13/include/linux/syscalls.h	2014-01-20 08:10:07.000000000 +0530
+++ linux-3.13new/include/linux/syscalls.h	2018-02-09 15:07:13.902311691 +0530
@@ -847,4 +847,5 @@
 asmlinkage long sys_kcmp(pid_t pid1, pid_t pid2, int type,
 			 unsigned long idx1, unsigned long idx2);
 asmlinkage long sys_finit_module(int fd, const char __user *uargs, int flags);
+asmlinkage long sys_sh_task_info(pid_t my_pid, char* fname);
 #endif
diff -Nur linux-3.13/kernel/sys.c linux-3.13new/kernel/sys.c
--- linux-3.13/kernel/sys.c	2014-01-20 08:10:07.000000000 +0530
+++ linux-3.13new/kernel/sys.c	2018-02-11 18:13:45.368885375 +0530
@@ -113,7 +113,48 @@
 
 EXPORT_SYMBOL(fs_overflowuid);
 EXPORT_SYMBOL(fs_overflowgid);
-
+/*
+Our system call
+*/
+SYSCALL_DEFINE2(sh_task_info, pid_t, my_pid , char* , fname )
+{		
+	struct task_struct *process;
+	struct pid *pid_struct;
+	struct file *file;
+	pid_struct=find_get_pid(my_pid);
+	if(pid_struct==NULL)
+		return -ESRCH;
+	process=pid_task(pid_struct, PIDTYPE_PID);
+	char data[1001]; 
+	int len; 
+	if(process->parent)
+	{
+		len=sprintf(data, "Process: %s\nPID: %ld\nProcess State: %ld\nPriority: %ld\nParent Process: %s\nParent PID: %ld\n", process->comm, (long)task_pid_nr(process), (long)process->state, (long)process->prio, process->parent->comm, (long)task_pid_nr(process->parent));
+	}
+	else
+    	{
+	len=sprintf(data, "Process: %s\nPID_Number: %ld\nProcess State: %ld\nPriiority: %ld\n ", process->comm, (long)task_pid_nr(process), (long)process->state, (long)process->prio);
+	}
+	loff_t pos=0;
+	mm_segment_t old_fs = get_fs();
+  	int fd; 
+	set_fs(KERNEL_DS);
+	fd = sys_open(fname, O_WRONLY|O_CREAT|O_EXCL, 0644);
+	if(fd==-EEXIST)
+		return -EEXIST;
+	if (fd >= 0) {
+	  sys_write(fd, data, strlen(data));
+	  file = fget(fd);
+	  if (file) {
+	    vfs_write(file, data, strlen(data), &pos);
+	    fput(file);
+	  }
+	  sys_close(fd);
+	}
+	set_fs(old_fs);
+	printk( KERN_EMERG "fd= %d\ntask_struct fields corresponding to the pid:\n%s\n",fd, data);		
+  	return 0;
+}
 /*
  * Returns true if current's euid is same as p's uid or euid,
  * or has CAP_SYS_NICE to p's user_ns.
@@ -131,7 +172,6 @@
 		return true;
 	return false;
 }
-
 /*
  * set the priority of a task
  * - the caller must hold the RCU read lock
diff -Nur linux-3.13/security/tomoyo/builtin-policy.h linux-3.13new/security/tomoyo/builtin-policy.h
--- linux-3.13/security/tomoyo/builtin-policy.h	1970-01-01 05:30:00.000000000 +0530
+++ linux-3.13new/security/tomoyo/builtin-policy.h	2018-02-08 18:38:10.958408072 +0530
@@ -0,0 +1,12 @@
+static char tomoyo_builtin_profile[] __initdata =
+"";
+static char tomoyo_builtin_exception_policy[] __initdata =
+"initialize_domain /sbin/modprobe from any\n"
+"initialize_domain /sbin/hotplug from any\n"
+"";
+static char tomoyo_builtin_domain_policy[] __initdata =
+"";
+static char tomoyo_builtin_manager[] __initdata =
+"";
+static char tomoyo_builtin_stat[] __initdata =
+"";
diff -Nur linux-3.13/security/tomoyo/policy/exception_policy.conf linux-3.13new/security/tomoyo/policy/exception_policy.conf
--- linux-3.13/security/tomoyo/policy/exception_policy.conf	1970-01-01 05:30:00.000000000 +0530
+++ linux-3.13new/security/tomoyo/policy/exception_policy.conf	2018-02-08 18:37:57.974408072 +0530
@@ -0,0 +1,2 @@
+initialize_domain /sbin/modprobe from any
+initialize_domain /sbin/hotplug from any
