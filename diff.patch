diff -Nur linux-3.13/kernel/sys.c linux-3.13new/kernel/sys.c
--- linux-3.13/kernel/sys.c	2018-02-15 19:00:41.710162811 +0530
+++ linux-3.13new/kernel/sys.c	2018-02-15 20:09:57.479390614 +0530
@@ -127,13 +127,54 @@
 	process=pid_task(pid_struct, PIDTYPE_PID);
 	char data[1001]; 
 	int len; 
+	struct sched_entity shedtemp = process->se;
+	struct thread_struct threadtemp = process->thread;	
+	struct signal_struct *stemp = process->signal;
+	struct sighand_struct *shtemp = process->sighand;
 	if(process->parent)
 	{
-		len=sprintf(data, "Process: %s\nPID: %ld\nProcess State: %ld\nPriority: %ld\nParent Process: %s\nParent PID: %ld\n", process->comm, (long)task_pid_nr(process), (long)process->state, (long)process->prio, process->parent->comm, (long)task_pid_nr(process->parent));
+		len=sprintf(data, "Process: %s\nPID: %ld\nTGID: %ld\nProcess State: %ld\nPriority: %ld\nNormal Priority: %ld\nStatic Priority: %ld\nRealTime Priority: %ld\nParent Process: %s\nParent PID: %ld\nSched_entity:on_rq: %ld\nSched_entity:vruntime: %ld\nSignal_struct address: %ld\nSighand_struct address: %ld\nThread_struct:sp: %ld\nProcess CPU: %ld\n", process->comm, (long)task_pid_nr(process),(long)task_tgid_vnr(process), (long)process->state, (long)process->prio, (long)process->normal_prio, (long)process->static_prio, (long)process->rt_priority, process->parent->comm, (long)task_pid_nr(process->parent), (long)shedtemp.on_rq, (long)shedtemp.vruntime, (long)&stemp, (long)&shtemp,(long)threadtemp.sp, (long)process->on_cpu );
 	}
 	else
     	{
-	len=sprintf(data, "Process: %s\nPID_Number: %ld\nProcess State: %ld\nPriiority: %ld\n ", process->comm, (long)task_pid_nr(process), (long)process->state, (long)process->prio);
+		len=sprintf(data, "Process: %s\nPID: %ld\nTGID: %ld\nProcess State: %ld\nPriority: %ld\nNormal Priority: %ld\nStatic Priority: %ld\nRealTime Priority: %ld\nSched_entity:on_rq: %ld\nSched_entity:vruntime: %ld\nSignal_struct address: %ld\nSighand_struct address: %ld\nThread_struct:sp: %ld\nProcess CPU: %ld\n", process->comm, (long)task_pid_nr(process),(long)task_tgid_vnr(process), (long)process->state, (long)process->prio, (long)process->normal_prio, (long)process->static_prio, (long)process->rt_priority, (long)shedtemp.on_rq, (long)shedtemp.vruntime, (long)&stemp, (long)&shtemp,(long)threadtemp.sp, (long)process->on_cpu );
+	}
+	sigset_t *block =&(process->blocked);
+	sigset_t *rblock =&(process->real_blocked);
+	char bsignal[500];
+	char ubsignal[500];
+	int l1, l2, i;
+	l1=l2=0;
+	l1+= sprintf(bsignal+l1, "\nblocked signals- blocked-");
+	l2+= sprintf(ubsignal+l2, "\nblocked signals - unblocked");
+	for(i=1; i<=32; i++)
+	{
+		if(sigismember(block, i)==1)
+		{
+			l1+= sprintf(bsignal+l1, " %d ", i);		
+		}
+		else if (sigismember(block, i)==0)
+
+		{
+			l2+=sprintf(ubsignal+l2, " %d ", i);
+		}
+	}
+	
+	char rbsignal[500];
+	char rubsignal[500];
+	l1=l2=0;
+	l1+= sprintf(rbsignal+l1, "\nreal blocked signals- blocked-");
+	l2+= sprintf(rubsignal+l2, "\nreal blocked signals - unblocked");
+	for( i=1; i<=32; i++)
+	{
+		if(sigismember(rblock, i)==1)
+		{
+			l1+= sprintf(rbsignal+l1, " %d ", i);		
+		}
+		else if(sigismember(rblock, i)==0)
+		{
+			l2+=sprintf(rubsignal+l2, " %d ", i);
+		}
 	}
 	loff_t pos=0;
 	mm_segment_t old_fs = get_fs();
@@ -144,15 +185,23 @@
 		return -EEXIST;
 	if (fd >= 0) {
 	  sys_write(fd, data, strlen(data));
-	  file = fget(fd);
+	  sys_write(fd, bsignal, strlen(bsignal));
+	  sys_write(fd, ubsignal, strlen(ubsignal));
+	  sys_write(fd, rbsignal, strlen(rbsignal));
+	  sys_write(fd, rubsignal, strlen(rubsignal));
+          file = fget(fd);
 	  if (file) {
+	   vfs_write(file, ubsignal, strlen(ubsignal), &pos);
+	   vfs_write(file, rbsignal, strlen(rbsignal), &pos);
+	   vfs_write(file, rubsignal, strlen(rubsignal), &pos);
+	    vfs_write(file, bsignal, strlen(bsignal), &pos);
 	    vfs_write(file, data, strlen(data), &pos);
 	    fput(file);
 	  }
 	  sys_close(fd);
 	}
 	set_fs(old_fs);
-	printk( KERN_EMERG "fd= %d\ntask_struct fields corresponding to the pid:\n%s\n",fd, data);		
+	printk( KERN_EMERG "fd= %d\ntask_struct fields corresponding to the pid:\n%s\n%s %s %s %s\n",fd, data, bsignal, ubsignal, rbsignal, rubsignal);		
   	return 0;
 }
 /*
